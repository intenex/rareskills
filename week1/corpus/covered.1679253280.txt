/Users/intenex/Dropbox/code/rareskills/week1/node_modules/@openzeppelin/contracts/access/Ownable.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | // OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)
  3 |     | 
  4 |     | pragma solidity ^0.8.0;
  5 |     | 
  6 |     | import "../utils/Context.sol";
  7 |     | 
  8 |     | /**
  9 |     |  * @dev Contract module which provides a basic access control mechanism, where
 10 |     |  * there is an account (an owner) that can be granted exclusive access to
 11 |     |  * specific functions.
 12 |     |  *
 13 |     |  * By default, the owner account will be the one that deploys the contract. This
 14 |     |  * can later be changed with {transferOwnership}.
 15 |     |  *
 16 |     |  * This module is used through inheritance. It will make available the modifier
 17 |     |  * `onlyOwner`, which can be applied to your functions to restrict their use to
 18 |     |  * the owner.
 19 |     |  */
 20 |     | abstract contract Ownable is Context {
 21 |     |     address private _owner;
 22 |     | 
 23 |     |     event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
 24 |     | 
 25 |     |     /**
 26 |     |      * @dev Initializes the contract setting the deployer as the initial owner.
 27 |     |      */
 28 |     |     constructor() {
 29 |     |         _transferOwnership(_msgSender());
 30 |     |     }
 31 |     | 
 32 |     |     /**
 33 |     |      * @dev Throws if called by any account other than the owner.
 34 |     |      */
 35 |     |     modifier onlyOwner() {
 36 | *r  |         _checkOwner();
 37 |     |         _;
 38 |     |     }
 39 |     | 
 40 |     |     /**
 41 |     |      * @dev Returns the address of the current owner.
 42 |     |      */
 43 | *r  |     function owner() public view virtual returns (address) {
 44 | *r  |         return _owner;
 45 |     |     }
 46 |     | 
 47 |     |     /**
 48 |     |      * @dev Throws if the sender is not the owner.
 49 |     |      */
 50 | *r  |     function _checkOwner() internal view virtual {
 51 | *r  |         require(owner() == _msgSender(), "Ownable: caller is not the owner");
 52 |     |     }
 53 |     | 
 54 |     |     /**
 55 |     |      * @dev Leaves the contract without owner. It will not be possible to call
 56 |     |      * `onlyOwner` functions anymore. Can only be called by the current owner.
 57 |     |      *
 58 |     |      * NOTE: Renouncing ownership will leave the contract without an owner,
 59 |     |      * thereby removing any functionality that is only available to the owner.
 60 |     |      */
 61 | *r  |     function renounceOwnership() public virtual onlyOwner {
 62 | *   |         _transferOwnership(address(0));
 63 |     |     }
 64 |     | 
 65 |     |     /**
 66 |     |      * @dev Transfers ownership of the contract to a new account (`newOwner`).
 67 |     |      * Can only be called by the current owner.
 68 |     |      */
 69 | *r  |     function transferOwnership(address newOwner) public virtual onlyOwner {
 70 | *r  |         require(newOwner != address(0), "Ownable: new owner is the zero address");
 71 | *   |         _transferOwnership(newOwner);
 72 |     |     }
 73 |     | 
 74 |     |     /**
 75 |     |      * @dev Transfers ownership of the contract to a new account (`newOwner`).
 76 |     |      * Internal function without access restriction.
 77 |     |      */
 78 | *   |     function _transferOwnership(address newOwner) internal virtual {
 79 | *   |         address oldOwner = _owner;
 80 | *   |         _owner = newOwner;
 81 | *   |         emit OwnershipTransferred(oldOwner, newOwner);
 82 |     |     }
 83 |     | }
 84 |     | 

/Users/intenex/Dropbox/code/rareskills/week1/node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol
   1 |     | // SPDX-License-Identifier: MIT
   2 |     | // OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)
   3 |     | 
   4 |     | pragma solidity ^0.8.0;
   5 |     | 
   6 |     | import "./IERC20.sol";
   7 |     | import "./extensions/IERC20Metadata.sol";
   8 |     | import "../../utils/Context.sol";
   9 |     | 
  10 |     | /**
  11 |     |  * @dev Implementation of the {IERC20} interface.
  12 |     |  *
  13 |     |  * This implementation is agnostic to the way tokens are created. This means
  14 |     |  * that a supply mechanism has to be added in a derived contract using {_mint}.
  15 |     |  * For a generic mechanism see {ERC20PresetMinterPauser}.
  16 |     |  *
  17 |     |  * TIP: For a detailed writeup see our guide
  18 |     |  * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How
  19 |     |  * to implement supply mechanisms].
  20 |     |  *
  21 |     |  * We have followed general OpenZeppelin Contracts guidelines: functions revert
  22 |     |  * instead returning `false` on failure. This behavior is nonetheless
  23 |     |  * conventional and does not conflict with the expectations of ERC20
  24 |     |  * applications.
  25 |     |  *
  26 |     |  * Additionally, an {Approval} event is emitted on calls to {transferFrom}.
  27 |     |  * This allows applications to reconstruct the allowance for all accounts just
  28 |     |  * by listening to said events. Other implementations of the EIP may not emit
  29 |     |  * these events, as it isn't required by the specification.
  30 |     |  *
  31 |     |  * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}
  32 |     |  * functions have been added to mitigate the well-known issues around setting
  33 |     |  * allowances. See {IERC20-approve}.
  34 |     |  */
  35 |     | contract ERC20 is Context, IERC20, IERC20Metadata {
  36 |     |     mapping(address => uint256) private _balances;
  37 |     | 
  38 |     |     mapping(address => mapping(address => uint256)) private _allowances;
  39 |     | 
  40 |     |     uint256 private _totalSupply;
  41 |     | 
  42 |     |     string private _name;
  43 |     |     string private _symbol;
  44 |     | 
  45 |     |     /**
  46 |     |      * @dev Sets the values for {name} and {symbol}.
  47 |     |      *
  48 |     |      * The default value of {decimals} is 18. To select a different value for
  49 |     |      * {decimals} you should overload it.
  50 |     |      *
  51 |     |      * All two of these values are immutable: they can only be set once during
  52 |     |      * construction.
  53 |     |      */
  54 |     |     constructor(string memory name_, string memory symbol_) {
  55 |     |         _name = name_;
  56 |     |         _symbol = symbol_;
  57 |     |     }
  58 |     | 
  59 |     |     /**
  60 |     |      * @dev Returns the name of the token.
  61 |     |      */
  62 | *   |     function name() public view virtual override returns (string memory) {
  63 | *   |         return _name;
  64 |     |     }
  65 |     | 
  66 |     |     /**
  67 |     |      * @dev Returns the symbol of the token, usually a shorter version of the
  68 |     |      * name.
  69 |     |      */
  70 | *   |     function symbol() public view virtual override returns (string memory) {
  71 | *   |         return _symbol;
  72 |     |     }
  73 |     | 
  74 |     |     /**
  75 |     |      * @dev Returns the number of decimals used to get its user representation.
  76 |     |      * For example, if `decimals` equals `2`, a balance of `505` tokens should
  77 |     |      * be displayed to a user as `5.05` (`505 / 10 ** 2`).
  78 |     |      *
  79 |     |      * Tokens usually opt for a value of 18, imitating the relationship between
  80 |     |      * Ether and Wei. This is the value {ERC20} uses, unless this function is
  81 |     |      * overridden;
  82 |     |      *
  83 |     |      * NOTE: This information is only used for _display_ purposes: it in
  84 |     |      * no way affects any of the arithmetic of the contract, including
  85 |     |      * {IERC20-balanceOf} and {IERC20-transfer}.
  86 |     |      */
  87 | *r  |     function decimals() public view virtual override returns (uint8) {
  88 | *r  |         return 18;
  89 |     |     }
  90 |     | 
  91 |     |     /**
  92 |     |      * @dev See {IERC20-totalSupply}.
  93 |     |      */
  94 | *r  |     function totalSupply() public view virtual override returns (uint256) {
  95 | *r  |         return _totalSupply;
  96 |     |     }
  97 |     | 
  98 |     |     /**
  99 |     |      * @dev See {IERC20-balanceOf}.
 100 |     |      */
 101 | *   |     function balanceOf(address account) public view virtual override returns (uint256) {
 102 | *   |         return _balances[account];
 103 |     |     }
 104 |     | 
 105 |     |     /**
 106 |     |      * @dev See {IERC20-transfer}.
 107 |     |      *
 108 |     |      * Requirements:
 109 |     |      *
 110 |     |      * - `to` cannot be the zero address.
 111 |     |      * - the caller must have a balance of at least `amount`.
 112 |     |      */
 113 | *r  |     function transfer(address to, uint256 amount) public virtual override returns (bool) {
 114 | *r  |         address owner = _msgSender();
 115 | *r  |         _transfer(owner, to, amount);
 116 | *r  |         return true;
 117 |     |     }
 118 |     | 
 119 |     |     /**
 120 |     |      * @dev See {IERC20-allowance}.
 121 |     |      */
 122 | *r  |     function allowance(address owner, address spender) public view virtual override returns (uint256) {
 123 | *r  |         return _allowances[owner][spender];
 124 |     |     }
 125 |     | 
 126 |     |     /**
 127 |     |      * @dev See {IERC20-approve}.
 128 |     |      *
 129 |     |      * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on
 130 |     |      * `transferFrom`. This is semantically equivalent to an infinite approval.
 131 |     |      *
 132 |     |      * Requirements:
 133 |     |      *
 134 |     |      * - `spender` cannot be the zero address.
 135 |     |      */
 136 | *r  |     function approve(address spender, uint256 amount) public virtual override returns (bool) {
 137 | *r  |         address owner = _msgSender();
 138 | *r  |         _approve(owner, spender, amount);
 139 | *r  |         return true;
 140 |     |     }
 141 |     | 
 142 |     |     /**
 143 |     |      * @dev See {IERC20-transferFrom}.
 144 |     |      *
 145 |     |      * Emits an {Approval} event indicating the updated allowance. This is not
 146 |     |      * required by the EIP. See the note at the beginning of {ERC20}.
 147 |     |      *
 148 |     |      * NOTE: Does not update the allowance if the current allowance
 149 |     |      * is the maximum `uint256`.
 150 |     |      *
 151 |     |      * Requirements:
 152 |     |      *
 153 |     |      * - `from` and `to` cannot be the zero address.
 154 |     |      * - `from` must have a balance of at least `amount`.
 155 |     |      * - the caller must have allowance for ``from``'s tokens of at least
 156 |     |      * `amount`.
 157 |     |      */
 158 | *r  |     function transferFrom(
 159 |     |         address from,
 160 |     |         address to,
 161 |     |         uint256 amount
 162 | *r  |     ) public virtual override returns (bool) {
 163 | *r  |         address spender = _msgSender();
 164 | *r  |         _spendAllowance(from, spender, amount);
 165 | *r  |         _transfer(from, to, amount);
 166 | *r  |         return true;
 167 |     |     }
 168 |     | 
 169 |     |     /**
 170 |     |      * @dev Atomically increases the allowance granted to `spender` by the caller.
 171 |     |      *
 172 |     |      * This is an alternative to {approve} that can be used as a mitigation for
 173 |     |      * problems described in {IERC20-approve}.
 174 |     |      *
 175 |     |      * Emits an {Approval} event indicating the updated allowance.
 176 |     |      *
 177 |     |      * Requirements:
 178 |     |      *
 179 |     |      * - `spender` cannot be the zero address.
 180 |     |      */
 181 | *r  |     function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
 182 | *r  |         address owner = _msgSender();
 183 | *r  |         _approve(owner, spender, allowance(owner, spender) + addedValue);
 184 | *   |         return true;
 185 |     |     }
 186 |     | 
 187 |     |     /**
 188 |     |      * @dev Atomically decreases the allowance granted to `spender` by the caller.
 189 |     |      *
 190 |     |      * This is an alternative to {approve} that can be used as a mitigation for
 191 |     |      * problems described in {IERC20-approve}.
 192 |     |      *
 193 |     |      * Emits an {Approval} event indicating the updated allowance.
 194 |     |      *
 195 |     |      * Requirements:
 196 |     |      *
 197 |     |      * - `spender` cannot be the zero address.
 198 |     |      * - `spender` must have allowance for the caller of at least
 199 |     |      * `subtractedValue`.
 200 |     |      */
 201 | *r  |     function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
 202 | *r  |         address owner = _msgSender();
 203 | *r  |         uint256 currentAllowance = allowance(owner, spender);
 204 | *r  |         require(currentAllowance >= subtractedValue, "ERC20: decreased allowance below zero");
 205 |     |         unchecked {
 206 | *r  |             _approve(owner, spender, currentAllowance - subtractedValue);
 207 |     |         }
 208 |     | 
 209 | *   |         return true;
 210 |     |     }
 211 |     | 
 212 |     |     /**
 213 |     |      * @dev Moves `amount` of tokens from `from` to `to`.
 214 |     |      *
 215 |     |      * This internal function is equivalent to {transfer}, and can be used to
 216 |     |      * e.g. implement automatic token fees, slashing mechanisms, etc.
 217 |     |      *
 218 |     |      * Emits a {Transfer} event.
 219 |     |      *
 220 |     |      * Requirements:
 221 |     |      *
 222 |     |      * - `from` cannot be the zero address.
 223 |     |      * - `to` cannot be the zero address.
 224 |     |      * - `from` must have a balance of at least `amount`.
 225 |     |      */
 226 | *r  |     function _transfer(
 227 |     |         address from,
 228 |     |         address to,
 229 |     |         uint256 amount
 230 | *r  |     ) internal virtual {
 231 | *r  |         require(from != address(0), "ERC20: transfer from the zero address");
 232 | *r  |         require(to != address(0), "ERC20: transfer to the zero address");
 233 |     | 
 234 | *r  |         _beforeTokenTransfer(from, to, amount);
 235 |     | 
 236 | *r  |         uint256 fromBalance = _balances[from];
 237 | *r  |         require(fromBalance >= amount, "ERC20: transfer amount exceeds balance");
 238 |     |         unchecked {
 239 | *r  |             _balances[from] = fromBalance - amount;
 240 |     |             // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by
 241 |     |             // decrementing then incrementing.
 242 | *r  |             _balances[to] += amount;
 243 |     |         }
 244 |     | 
 245 | *r  |         emit Transfer(from, to, amount);
 246 |     | 
 247 | *r  |         _afterTokenTransfer(from, to, amount);
 248 |     |     }
 249 |     | 
 250 |     |     /** @dev Creates `amount` tokens and assigns them to `account`, increasing
 251 |     |      * the total supply.
 252 |     |      *
 253 |     |      * Emits a {Transfer} event with `from` set to the zero address.
 254 |     |      *
 255 |     |      * Requirements:
 256 |     |      *
 257 |     |      * - `account` cannot be the zero address.
 258 |     |      */
 259 |     |     function _mint(address account, uint256 amount) internal virtual {
 260 |     |         require(account != address(0), "ERC20: mint to the zero address");
 261 |     | 
 262 |     |         _beforeTokenTransfer(address(0), account, amount);
 263 |     | 
 264 |     |         _totalSupply += amount;
 265 |     |         unchecked {
 266 |     |             // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.
 267 |     |             _balances[account] += amount;
 268 |     |         }
 269 |     |         emit Transfer(address(0), account, amount);
 270 |     | 
 271 |     |         _afterTokenTransfer(address(0), account, amount);
 272 |     |     }
 273 |     | 
 274 |     |     /**
 275 |     |      * @dev Destroys `amount` tokens from `account`, reducing the
 276 |     |      * total supply.
 277 |     |      *
 278 |     |      * Emits a {Transfer} event with `to` set to the zero address.
 279 |     |      *
 280 |     |      * Requirements:
 281 |     |      *
 282 |     |      * - `account` cannot be the zero address.
 283 |     |      * - `account` must have at least `amount` tokens.
 284 |     |      */
 285 | *r  |     function _burn(address account, uint256 amount) internal virtual {
 286 | *r  |         require(account != address(0), "ERC20: burn from the zero address");
 287 |     | 
 288 | *r  |         _beforeTokenTransfer(account, address(0), amount);
 289 |     | 
 290 | *r  |         uint256 accountBalance = _balances[account];
 291 | *r  |         require(accountBalance >= amount, "ERC20: burn amount exceeds balance");
 292 |     |         unchecked {
 293 | *r  |             _balances[account] = accountBalance - amount;
 294 |     |             // Overflow not possible: amount <= accountBalance <= totalSupply.
 295 | *r  |             _totalSupply -= amount;
 296 |     |         }
 297 |     | 
 298 | *r  |         emit Transfer(account, address(0), amount);
 299 |     | 
 300 | *r  |         _afterTokenTransfer(account, address(0), amount);
 301 |     |     }
 302 |     | 
 303 |     |     /**
 304 |     |      * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.
 305 |     |      *
 306 |     |      * This internal function is equivalent to `approve`, and can be used to
 307 |     |      * e.g. set automatic allowances for certain subsystems, etc.
 308 |     |      *
 309 |     |      * Emits an {Approval} event.
 310 |     |      *
 311 |     |      * Requirements:
 312 |     |      *
 313 |     |      * - `owner` cannot be the zero address.
 314 |     |      * - `spender` cannot be the zero address.
 315 |     |      */
 316 | *r  |     function _approve(
 317 |     |         address owner,
 318 |     |         address spender,
 319 |     |         uint256 amount
 320 |     |     ) internal virtual {
 321 | *r  |         require(owner != address(0), "ERC20: approve from the zero address");
 322 | *r  |         require(spender != address(0), "ERC20: approve to the zero address");
 323 |     | 
 324 | *r  |         _allowances[owner][spender] = amount;
 325 | *r  |         emit Approval(owner, spender, amount);
 326 |     |     }
 327 |     | 
 328 |     |     /**
 329 |     |      * @dev Updates `owner` s allowance for `spender` based on spent `amount`.
 330 |     |      *
 331 |     |      * Does not update the allowance amount in case of infinite allowance.
 332 |     |      * Revert if not enough allowance is available.
 333 |     |      *
 334 |     |      * Might emit an {Approval} event.
 335 |     |      */
 336 | *r  |     function _spendAllowance(
 337 |     |         address owner,
 338 |     |         address spender,
 339 |     |         uint256 amount
 340 | *r  |     ) internal virtual {
 341 | *r  |         uint256 currentAllowance = allowance(owner, spender);
 342 | *r  |         if (currentAllowance != type(uint256).max) {
 343 | *r  |             require(currentAllowance >= amount, "ERC20: insufficient allowance");
 344 |     |             unchecked {
 345 | *r  |                 _approve(owner, spender, currentAllowance - amount);
 346 |     |             }
 347 |     |         }
 348 |     |     }
 349 |     | 
 350 |     |     /**
 351 |     |      * @dev Hook that is called before any transfer of tokens. This includes
 352 |     |      * minting and burning.
 353 |     |      *
 354 |     |      * Calling conditions:
 355 |     |      *
 356 |     |      * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens
 357 |     |      * will be transferred to `to`.
 358 |     |      * - when `from` is zero, `amount` tokens will be minted for `to`.
 359 |     |      * - when `to` is zero, `amount` of ``from``'s tokens will be burned.
 360 |     |      * - `from` and `to` are never both zero.
 361 |     |      *
 362 |     |      * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].
 363 |     |      */
 364 | *r  |     function _beforeTokenTransfer(
 365 |     |         address from,
 366 |     |         address to,
 367 |     |         uint256 amount
 368 |     |     ) internal virtual {}
 369 |     | 
 370 |     |     /**
 371 |     |      * @dev Hook that is called after any transfer of tokens. This includes
 372 |     |      * minting and burning.
 373 |     |      *
 374 |     |      * Calling conditions:
 375 |     |      *
 376 |     |      * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens
 377 |     |      * has been transferred to `to`.
 378 |     |      * - when `from` is zero, `amount` tokens have been minted for `to`.
 379 |     |      * - when `to` is zero, `amount` of ``from``'s tokens have been burned.
 380 |     |      * - `from` and `to` are never both zero.
 381 |     |      *
 382 |     |      * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].
 383 |     |      */
 384 | *r  |     function _afterTokenTransfer(
 385 |     |         address from,
 386 |     |         address to,
 387 |     |         uint256 amount
 388 |     |     ) internal virtual {}
 389 |     | }
 390 |     | 

/Users/intenex/Dropbox/code/rareskills/week1/node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | // OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)
  3 |     | 
  4 |     | pragma solidity ^0.8.0;
  5 |     | 
  6 |     | /**
  7 |     |  * @dev Interface of the ERC20 standard as defined in the EIP.
  8 |     |  */
  9 |     | interface IERC20 {
 10 |     |     /**
 11 |     |      * @dev Emitted when `value` tokens are moved from one account (`from`) to
 12 |     |      * another (`to`).
 13 |     |      *
 14 |     |      * Note that `value` may be zero.
 15 |     |      */
 16 |     |     event Transfer(address indexed from, address indexed to, uint256 value);
 17 |     | 
 18 |     |     /**
 19 |     |      * @dev Emitted when the allowance of a `spender` for an `owner` is set by
 20 |     |      * a call to {approve}. `value` is the new allowance.
 21 |     |      */
 22 |     |     event Approval(address indexed owner, address indexed spender, uint256 value);
 23 |     | 
 24 |     |     /**
 25 |     |      * @dev Returns the amount of tokens in existence.
 26 |     |      */
 27 |     |     function totalSupply() external view returns (uint256);
 28 |     | 
 29 |     |     /**
 30 |     |      * @dev Returns the amount of tokens owned by `account`.
 31 |     |      */
 32 |     |     function balanceOf(address account) external view returns (uint256);
 33 |     | 
 34 |     |     /**
 35 |     |      * @dev Moves `amount` tokens from the caller's account to `to`.
 36 |     |      *
 37 |     |      * Returns a boolean value indicating whether the operation succeeded.
 38 |     |      *
 39 |     |      * Emits a {Transfer} event.
 40 |     |      */
 41 |     |     function transfer(address to, uint256 amount) external returns (bool);
 42 |     | 
 43 |     |     /**
 44 |     |      * @dev Returns the remaining number of tokens that `spender` will be
 45 |     |      * allowed to spend on behalf of `owner` through {transferFrom}. This is
 46 |     |      * zero by default.
 47 |     |      *
 48 |     |      * This value changes when {approve} or {transferFrom} are called.
 49 |     |      */
 50 |     |     function allowance(address owner, address spender) external view returns (uint256);
 51 |     | 
 52 |     |     /**
 53 |     |      * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
 54 |     |      *
 55 |     |      * Returns a boolean value indicating whether the operation succeeded.
 56 |     |      *
 57 |     |      * IMPORTANT: Beware that changing an allowance with this method brings the risk
 58 |     |      * that someone may use both the old and the new allowance by unfortunate
 59 |     |      * transaction ordering. One possible solution to mitigate this race
 60 |     |      * condition is to first reduce the spender's allowance to 0 and set the
 61 |     |      * desired value afterwards:
 62 |     |      * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
 63 |     |      *
 64 |     |      * Emits an {Approval} event.
 65 |     |      */
 66 |     |     function approve(address spender, uint256 amount) external returns (bool);
 67 |     | 
 68 |     |     /**
 69 |     |      * @dev Moves `amount` tokens from `from` to `to` using the
 70 |     |      * allowance mechanism. `amount` is then deducted from the caller's
 71 |     |      * allowance.
 72 |     |      *
 73 |     |      * Returns a boolean value indicating whether the operation succeeded.
 74 |     |      *
 75 |     |      * Emits a {Transfer} event.
 76 |     |      */
 77 |     |     function transferFrom(
 78 |     |         address from,
 79 |     |         address to,
 80 |     |         uint256 amount
 81 |     |     ) external returns (bool);
 82 |     | }
 83 |     | 

/Users/intenex/Dropbox/code/rareskills/week1/node_modules/@openzeppelin/contracts/token/ERC20/extensions/ERC20Capped.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | // OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/ERC20Capped.sol)
  3 |     | 
  4 |     | pragma solidity ^0.8.0;
  5 |     | 
  6 |     | import "../ERC20.sol";
  7 |     | 
  8 |     | /**
  9 |     |  * @dev Extension of {ERC20} that adds a cap to the supply of tokens.
 10 |     |  */
 11 |     | abstract contract ERC20Capped is ERC20 {
 12 |     |     uint256 private immutable _cap;
 13 |     | 
 14 |     |     /**
 15 |     |      * @dev Sets the value of the `cap`. This value is immutable, it can only be
 16 |     |      * set once during construction.
 17 |     |      */
 18 |     |     constructor(uint256 cap_) {
 19 |     |         require(cap_ > 0, "ERC20Capped: cap is 0");
 20 |     |         _cap = cap_;
 21 |     |     }
 22 |     | 
 23 |     |     /**
 24 |     |      * @dev Returns the cap on the token's total supply.
 25 |     |      */
 26 | *   |     function cap() public view virtual returns (uint256) {
 27 | *   |         return _cap;
 28 |     |     }
 29 |     | 
 30 |     |     /**
 31 |     |      * @dev See {ERC20-_mint}.
 32 |     |      */
 33 |     |     function _mint(address account, uint256 amount) internal virtual override {
 34 |     |         require(ERC20.totalSupply() + amount <= cap(), "ERC20Capped: cap exceeded");
 35 |     |         super._mint(account, amount);
 36 |     |     }
 37 |     | }
 38 |     | 

/Users/intenex/Dropbox/code/rareskills/week1/node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | // OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)
  3 |     | 
  4 |     | pragma solidity ^0.8.0;
  5 |     | 
  6 |     | import "../IERC20.sol";
  7 |     | 
  8 |     | /**
  9 |     |  * @dev Interface for the optional metadata functions from the ERC20 standard.
 10 |     |  *
 11 |     |  * _Available since v4.1._
 12 |     |  */
 13 |     | interface IERC20Metadata is IERC20 {
 14 |     |     /**
 15 |     |      * @dev Returns the name of the token.
 16 |     |      */
 17 |     |     function name() external view returns (string memory);
 18 |     | 
 19 |     |     /**
 20 |     |      * @dev Returns the symbol of the token.
 21 |     |      */
 22 |     |     function symbol() external view returns (string memory);
 23 |     | 
 24 |     |     /**
 25 |     |      * @dev Returns the decimals places of the token.
 26 |     |      */
 27 |     |     function decimals() external view returns (uint8);
 28 |     | }
 29 |     | 

/Users/intenex/Dropbox/code/rareskills/week1/node_modules/@openzeppelin/contracts/utils/Address.sol
   1 |     | // SPDX-License-Identifier: MIT
   2 |     | // OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)
   3 |     | 
   4 |     | pragma solidity ^0.8.1;
   5 |     | 
   6 |     | /**
   7 |     |  * @dev Collection of functions related to the address type
   8 |     |  */
   9 |     | library Address {
  10 |     |     /**
  11 |     |      * @dev Returns true if `account` is a contract.
  12 |     |      *
  13 |     |      * [IMPORTANT]
  14 |     |      * ====
  15 |     |      * It is unsafe to assume that an address for which this function returns
  16 |     |      * false is an externally-owned account (EOA) and not a contract.
  17 |     |      *
  18 |     |      * Among others, `isContract` will return false for the following
  19 |     |      * types of addresses:
  20 |     |      *
  21 |     |      *  - an externally-owned account
  22 |     |      *  - a contract in construction
  23 |     |      *  - an address where a contract will be created
  24 |     |      *  - an address where a contract lived, but was destroyed
  25 |     |      * ====
  26 |     |      *
  27 |     |      * [IMPORTANT]
  28 |     |      * ====
  29 |     |      * You shouldn't rely on `isContract` to protect against flash loan attacks!
  30 |     |      *
  31 |     |      * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets
  32 |     |      * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract
  33 |     |      * constructor.
  34 |     |      * ====
  35 |     |      */
  36 | *r  |     function isContract(address account) internal view returns (bool) {
  37 |     |         // This method relies on extcodesize/address.code.length, which returns 0
  38 |     |         // for contracts in construction, since the code is only stored at the end
  39 |     |         // of the constructor execution.
  40 |     | 
  41 | *r  |         return account.code.length > 0;
  42 |     |     }
  43 |     | 
  44 |     |     /**
  45 |     |      * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
  46 |     |      * `recipient`, forwarding all available gas and reverting on errors.
  47 |     |      *
  48 |     |      * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
  49 |     |      * of certain opcodes, possibly making contracts go over the 2300 gas limit
  50 |     |      * imposed by `transfer`, making them unable to receive funds via
  51 |     |      * `transfer`. {sendValue} removes this limitation.
  52 |     |      *
  53 |     |      * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].
  54 |     |      *
  55 |     |      * IMPORTANT: because control is transferred to `recipient`, care must be
  56 |     |      * taken to not create reentrancy vulnerabilities. Consider using
  57 |     |      * {ReentrancyGuard} or the
  58 |     |      * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
  59 |     |      */
  60 |     |     function sendValue(address payable recipient, uint256 amount) internal {
  61 |     |         require(address(this).balance >= amount, "Address: insufficient balance");
  62 |     | 
  63 |     |         (bool success, ) = recipient.call{value: amount}("");
  64 |     |         require(success, "Address: unable to send value, recipient may have reverted");
  65 |     |     }
  66 |     | 
  67 |     |     /**
  68 |     |      * @dev Performs a Solidity function call using a low level `call`. A
  69 |     |      * plain `call` is an unsafe replacement for a function call: use this
  70 |     |      * function instead.
  71 |     |      *
  72 |     |      * If `target` reverts with a revert reason, it is bubbled up by this
  73 |     |      * function (like regular Solidity function calls).
  74 |     |      *
  75 |     |      * Returns the raw returned data. To convert to the expected return value,
  76 |     |      * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].
  77 |     |      *
  78 |     |      * Requirements:
  79 |     |      *
  80 |     |      * - `target` must be a contract.
  81 |     |      * - calling `target` with `data` must not revert.
  82 |     |      *
  83 |     |      * _Available since v3.1._
  84 |     |      */
  85 |     |     function functionCall(address target, bytes memory data) internal returns (bytes memory) {
  86 |     |         return functionCallWithValue(target, data, 0, "Address: low-level call failed");
  87 |     |     }
  88 |     | 
  89 |     |     /**
  90 |     |      * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with
  91 |     |      * `errorMessage` as a fallback revert reason when `target` reverts.
  92 |     |      *
  93 |     |      * _Available since v3.1._
  94 |     |      */
  95 |     |     function functionCall(
  96 |     |         address target,
  97 |     |         bytes memory data,
  98 |     |         string memory errorMessage
  99 |     |     ) internal returns (bytes memory) {
 100 |     |         return functionCallWithValue(target, data, 0, errorMessage);
 101 |     |     }
 102 |     | 
 103 |     |     /**
 104 |     |      * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
 105 |     |      * but also transferring `value` wei to `target`.
 106 |     |      *
 107 |     |      * Requirements:
 108 |     |      *
 109 |     |      * - the calling contract must have an ETH balance of at least `value`.
 110 |     |      * - the called Solidity function must be `payable`.
 111 |     |      *
 112 |     |      * _Available since v3.1._
 113 |     |      */
 114 |     |     function functionCallWithValue(
 115 |     |         address target,
 116 |     |         bytes memory data,
 117 |     |         uint256 value
 118 |     |     ) internal returns (bytes memory) {
 119 |     |         return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
 120 |     |     }
 121 |     | 
 122 |     |     /**
 123 |     |      * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but
 124 |     |      * with `errorMessage` as a fallback revert reason when `target` reverts.
 125 |     |      *
 126 |     |      * _Available since v3.1._
 127 |     |      */
 128 |     |     function functionCallWithValue(
 129 |     |         address target,
 130 |     |         bytes memory data,
 131 |     |         uint256 value,
 132 |     |         string memory errorMessage
 133 |     |     ) internal returns (bytes memory) {
 134 |     |         require(address(this).balance >= value, "Address: insufficient balance for call");
 135 |     |         (bool success, bytes memory returndata) = target.call{value: value}(data);
 136 |     |         return verifyCallResultFromTarget(target, success, returndata, errorMessage);
 137 |     |     }
 138 |     | 
 139 |     |     /**
 140 |     |      * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
 141 |     |      * but performing a static call.
 142 |     |      *
 143 |     |      * _Available since v3.3._
 144 |     |      */
 145 |     |     function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
 146 |     |         return functionStaticCall(target, data, "Address: low-level static call failed");
 147 |     |     }
 148 |     | 
 149 |     |     /**
 150 |     |      * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
 151 |     |      * but performing a static call.
 152 |     |      *
 153 |     |      * _Available since v3.3._
 154 |     |      */
 155 |     |     function functionStaticCall(
 156 |     |         address target,
 157 |     |         bytes memory data,
 158 |     |         string memory errorMessage
 159 |     |     ) internal view returns (bytes memory) {
 160 |     |         (bool success, bytes memory returndata) = target.staticcall(data);
 161 |     |         return verifyCallResultFromTarget(target, success, returndata, errorMessage);
 162 |     |     }
 163 |     | 
 164 |     |     /**
 165 |     |      * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
 166 |     |      * but performing a delegate call.
 167 |     |      *
 168 |     |      * _Available since v3.4._
 169 |     |      */
 170 |     |     function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
 171 |     |         return functionDelegateCall(target, data, "Address: low-level delegate call failed");
 172 |     |     }
 173 |     | 
 174 |     |     /**
 175 |     |      * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
 176 |     |      * but performing a delegate call.
 177 |     |      *
 178 |     |      * _Available since v3.4._
 179 |     |      */
 180 |     |     function functionDelegateCall(
 181 |     |         address target,
 182 |     |         bytes memory data,
 183 |     |         string memory errorMessage
 184 |     |     ) internal returns (bytes memory) {
 185 |     |         (bool success, bytes memory returndata) = target.delegatecall(data);
 186 |     |         return verifyCallResultFromTarget(target, success, returndata, errorMessage);
 187 |     |     }
 188 |     | 
 189 |     |     /**
 190 |     |      * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling
 191 |     |      * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.
 192 |     |      *
 193 |     |      * _Available since v4.8._
 194 |     |      */
 195 |     |     function verifyCallResultFromTarget(
 196 |     |         address target,
 197 |     |         bool success,
 198 |     |         bytes memory returndata,
 199 |     |         string memory errorMessage
 200 |     |     ) internal view returns (bytes memory) {
 201 |     |         if (success) {
 202 |     |             if (returndata.length == 0) {
 203 |     |                 // only check isContract if the call was successful and the return data is empty
 204 |     |                 // otherwise we already know that it was a contract
 205 |     |                 require(isContract(target), "Address: call to non-contract");
 206 |     |             }
 207 |     |             return returndata;
 208 |     |         } else {
 209 |     |             _revert(returndata, errorMessage);
 210 |     |         }
 211 |     |     }
 212 |     | 
 213 |     |     /**
 214 |     |      * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the
 215 |     |      * revert reason or using the provided one.
 216 |     |      *
 217 |     |      * _Available since v4.3._
 218 |     |      */
 219 |     |     function verifyCallResult(
 220 |     |         bool success,
 221 |     |         bytes memory returndata,
 222 |     |         string memory errorMessage
 223 |     |     ) internal pure returns (bytes memory) {
 224 |     |         if (success) {
 225 |     |             return returndata;
 226 |     |         } else {
 227 |     |             _revert(returndata, errorMessage);
 228 |     |         }
 229 |     |     }
 230 |     | 
 231 |     |     function _revert(bytes memory returndata, string memory errorMessage) private pure {
 232 |     |         // Look for revert reason and bubble it up if present
 233 |     |         if (returndata.length > 0) {
 234 |     |             // The easiest way to bubble the revert reason is using memory via assembly
 235 |     |             /// @solidity memory-safe-assembly
 236 |     |             assembly {
 237 |     |                 let returndata_size := mload(returndata)
 238 |     |                 revert(add(32, returndata), returndata_size)
 239 |     |             }
 240 |     |         } else {
 241 |     |             revert(errorMessage);
 242 |     |         }
 243 |     |     }
 244 |     | }
 245 |     | 

/Users/intenex/Dropbox/code/rareskills/week1/node_modules/@openzeppelin/contracts/utils/Context.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | // OpenZeppelin Contracts v4.4.1 (utils/Context.sol)
  3 |     | 
  4 |     | pragma solidity ^0.8.0;
  5 |     | 
  6 |     | /**
  7 |     |  * @dev Provides information about the current execution context, including the
  8 |     |  * sender of the transaction and its data. While these are generally available
  9 |     |  * via msg.sender and msg.data, they should not be accessed in such a direct
 10 |     |  * manner, since when dealing with meta-transactions the account sending and
 11 |     |  * paying for execution may not be the actual sender (as far as an application
 12 |     |  * is concerned).
 13 |     |  *
 14 |     |  * This contract is only required for intermediate, library-like contracts.
 15 |     |  */
 16 |     | abstract contract Context {
 17 | *r  |     function _msgSender() internal view virtual returns (address) {
 18 | *r  |         return msg.sender;
 19 |     |     }
 20 |     | 
 21 |     |     function _msgData() internal view virtual returns (bytes calldata) {
 22 |     |         return msg.data;
 23 |     |     }
 24 |     | }
 25 |     | 

/Users/intenex/Dropbox/code/rareskills/week1/node_modules/@openzeppelin/contracts/utils/introspection/ERC165.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | // OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)
  3 |     | 
  4 |     | pragma solidity ^0.8.0;
  5 |     | 
  6 |     | import "./IERC165.sol";
  7 |     | 
  8 |     | /**
  9 |     |  * @dev Implementation of the {IERC165} interface.
 10 |     |  *
 11 |     |  * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check
 12 |     |  * for the additional interface id that will be supported. For example:
 13 |     |  *
 14 |     |  * ```solidity
 15 |     |  * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
 16 |     |  *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);
 17 |     |  * }
 18 |     |  * ```
 19 |     |  *
 20 |     |  * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.
 21 |     |  */
 22 |     | abstract contract ERC165 is IERC165 {
 23 |     |     /**
 24 |     |      * @dev See {IERC165-supportsInterface}.
 25 |     |      */
 26 | *   |     function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
 27 | *   |         return interfaceId == type(IERC165).interfaceId;
 28 |     |     }
 29 |     | }
 30 |     | 

/Users/intenex/Dropbox/code/rareskills/week1/node_modules/@openzeppelin/contracts/utils/introspection/IERC165.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | // OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)
  3 |     | 
  4 |     | pragma solidity ^0.8.0;
  5 |     | 
  6 |     | /**
  7 |     |  * @dev Interface of the ERC165 standard, as defined in the
  8 |     |  * https://eips.ethereum.org/EIPS/eip-165[EIP].
  9 |     |  *
 10 |     |  * Implementers can declare support of contract interfaces, which can then be
 11 |     |  * queried by others ({ERC165Checker}).
 12 |     |  *
 13 |     |  * For an implementation, see {ERC165}.
 14 |     |  */
 15 |     | interface IERC165 {
 16 |     |     /**
 17 |     |      * @dev Returns true if this contract implements the interface defined by
 18 |     |      * `interfaceId`. See the corresponding
 19 |     |      * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]
 20 |     |      * to learn more about how these ids are created.
 21 |     |      *
 22 |     |      * This function call must use less than 30 000 gas.
 23 |     |      */
 24 |     |     function supportsInterface(bytes4 interfaceId) external view returns (bool);
 25 |     | }
 26 |     | 

/Users/intenex/Dropbox/code/rareskills/week1/contracts/ERC1363BondingCurve.sol
   1 |     | // SPDX-License-Identifier: MIT
   2 |     | pragma solidity 0.8.18;
   3 |     | 
   4 |     | import {ERC1363} from "erc-payable-token/contracts/token/ERC1363/ERC1363.sol";
   5 |     | import {IERC1363Receiver} from "erc-payable-token/contracts/token/ERC1363/IERC1363Receiver.sol";
   6 |     | import {ERC20Capped, ERC20} from "@openzeppelin/contracts/token/ERC20/extensions/ERC20Capped.sol";
   7 |     | import {Ownable} from "@openzeppelin/contracts/access/Ownable.sol";
   8 |     | 
   9 |     | /**
  10 |     |  * @title RareSkills Week1 ERC-1363 Bonding Curve Mint Contract
  11 |     |  * @author Ben Yu
  12 |     |  * @notice An ERC-1363 contract that implements sanctioning addresses, admin transfers, and linear bonding curve minting
  13 |     |  */
  14 |     | contract ERC1363BondingCurve is
  15 |     |     ERC1363,
  16 |     |     IERC1363Receiver,
  17 |     |     ERC20Capped,
  18 |     |     Ownable
  19 |     | {
  20 |     |     uint256 public constant MAX_SUPPLY = 100_000_000 ether; // 100 million tokens; ether is shorthand for 18 decimal places
  21 | *   |     uint256 public constant INITIAL_PRICE_PER_TOKEN = 0;
  22 | *r  |     uint256 public constant PRICE_INCREASE_PER_TOKEN = 0.0001 ether;
  23 |     | 
  24 | *   |     mapping(address => bool) public bannedAddresses;
  25 |     | 
  26 | *   |     uint256 public withdrawableBalance;
  27 |     | 
  28 |     |     constructor(
  29 |     |         string memory _name,
  30 |     |         string memory _symbol
  31 |     |     ) ERC20(_name, _symbol) ERC20Capped(MAX_SUPPLY) {}
  32 |     | 
  33 |     |     function _mint(
  34 |     |         address _account,
  35 |     |         uint256 _amount
  36 |     |     ) internal override(ERC20, ERC20Capped) {
  37 |     |         ERC20Capped._mint(_account, _amount);
  38 |     |     }
  39 |     | 
  40 |     |     /**
  41 |     |      * @notice Returns the value of one token in wei
  42 |     |      */
  43 | *r  |     function oneToken() public view returns (uint256) {
  44 | *r  |         return 10 ** decimals();
  45 |     |     }
  46 |     | 
  47 |     |     /**
  48 |     |      * @notice Admin function to ban or unban an address
  49 |     |      * @param _bannedAddress Address to ban or unban
  50 |     |      * @param _banned True if address should be banned, false if address should be unbanned
  51 |     |      */
  52 | *r  |     function adminBanOrUnbanAddress(
  53 |     |         address _bannedAddress,
  54 |     |         bool _banned
  55 |     |     ) external onlyOwner {
  56 | *   |         bannedAddresses[_bannedAddress] = _banned;
  57 |     |     }
  58 |     | 
  59 |     |     /**
  60 |     |      * @dev Overrides the default _beforeTokenTransfer function to add ban checks
  61 |     |      * @param _from Address sending tokens
  62 |     |      * @param _to Address receiving tokens
  63 |     |      * @param _amount Amount of tokens being transferred
  64 |     |      */
  65 | *r  |     function _beforeTokenTransfer(
  66 |     |         address _from,
  67 |     |         address _to,
  68 |     |         uint256 _amount
  69 |     |     ) internal override {
  70 | *r  |         require(!bannedAddresses[_from], "Transfer from banned address");
  71 | *r  |         require(!bannedAddresses[_to], "Transfer to banned address");
  72 | *r  |         super._beforeTokenTransfer(_from, _to, _amount);
  73 |     |     }
  74 |     | 
  75 |     |     /**
  76 |     |      * @notice Admin function to transfer tokens from one address to another
  77 |     |      * @param _from Address to transfer tokens from
  78 |     |      * @param _to Address to transfer tokens to
  79 |     |      * @param _amount Amount of tokens to transfer
  80 |     |      */
  81 | r   |     function adminTransfer(
  82 |     |         address _from,
  83 |     |         address _to,
  84 |     |         uint256 _amount
  85 |     |     ) external onlyOwner {
  86 | r   |         _transfer(_from, _to, _amount);
  87 |     |     }
  88 |     | 
  89 |     |     // for echidna testing of the balance
  90 | *r  |     function contractBalance() public view returns (uint256) {
  91 | *r  |         return address(this).balance;
  92 |     |     }
  93 |     | 
  94 |     |     /**
  95 |     |      * @notice Returns the current price of purchasing a token
  96 |     |      */
  97 | *r  |     function getCurrentPrice() public view returns (uint256) {
  98 | *r  |         return (totalSupply() * PRICE_INCREASE_PER_TOKEN) / oneToken();
  99 |     |     }
 100 |     | 
 101 |     |     /**
 102 |     |      * @notice Function to mint tokens at a bonding curve price
 103 |     |      * @param _amount Amount of tokens to mint in smallest unit of account (18 decimal places)
 104 |     |      */
 105 |     |     function mintBondingCurve(uint256 _amount) internal {
 106 |     |         require(
 107 |     |             totalSupply() + _amount <= MAX_SUPPLY,
 108 |     |             "Cannot mint more than max supply"
 109 |     |         );
 110 |     | 
 111 |     |         // Finding the price to pay is finding the area of a trapezoid - (base 1 + base 2) * height / 2
 112 |     |         // Height == # of tokens, base 1 is the current price, base 2 is the final price after all the tokens are purchased
 113 |     |         uint256 currentPrice = getCurrentPrice(); // 0
 114 |     |         uint256 endingPrice = currentPrice +
 115 |     |             ((_amount * PRICE_INCREASE_PER_TOKEN) / oneToken());
 116 |     |         uint256 priceToPay = ((currentPrice + endingPrice) * _amount) /
 117 |     |             oneToken() /
 118 |     |             2;
 119 |     |         require(msg.value >= priceToPay, "Incorrect ETH amount paid");
 120 |     |         // refund any extra ETH sent
 121 |     |         if (msg.value > priceToPay) {
 122 |     |             (bool success, ) = msg.sender.call{value: msg.value - priceToPay}(
 123 |     |                 ""
 124 |     |             );
 125 |     |             require(success, "Transfer failed.");
 126 |     |         }
 127 |     | 
 128 |     |         _mint(msg.sender, _amount);
 129 |     |     }
 130 |     | 
 131 |     |     /**
 132 |     |      * @notice Allows for tokens to be sent to this contract and then refunded at a 10% loss at current market rate
 133 |     |      * @dev Any ERC1363 smart contract calls this function on the recipient
 134 |     |      * after a `transfer` or a `transferFrom`. This function MAY throw to revert and reject the
 135 |     |      * transfer. Return of other than the magic value MUST result in the
 136 |     |      * transaction being reverted.
 137 |     |      * Note: the token contract address is always the message sender.
 138 |     |      * @param _spender address The address which called `transferAndCall` or `transferFromAndCall` function
 139 |     |      * @param _amount uint256 The amount of tokens transferred
 140 |     |      * @return `bytes4(keccak256("onTransferReceived(address,address,uint256,bytes)"))` unless throwing
 141 |     |      */
 142 | *r  |     function onTransferReceived(
 143 |     |         address _spender,
 144 |     |         address,
 145 |     |         uint256 _amount,
 146 |     |         bytes calldata
 147 | *r  |     ) external override returns (bytes4) {
 148 | *r  |         uint256 currentPrice = getCurrentPrice();
 149 | *r  |         uint256 endingPrice = currentPrice -
 150 | *r  |             ((_amount * PRICE_INCREASE_PER_TOKEN) / oneToken());
 151 | *r  |         uint256 priceToRefund = ((currentPrice + endingPrice) * _amount) /
 152 | *r  |             oneToken() /
 153 | *r  |             2;
 154 |     | 
 155 | *r  |         _burn(msg.sender, _amount);
 156 |     | 
 157 | *r  |         (bool success, ) = _spender.call{value: priceToRefund}("");
 158 | *r  |         require(success, "Transfer failed.");
 159 | *   |         return
 160 |     |             bytes4(
 161 | *   |                 keccak256("onTransferReceived(address,address,uint256,bytes)")
 162 |     |             );
 163 |     |     }
 164 |     | }
 165 |     | 

/Users/intenex/Dropbox/code/rareskills/week1/contracts/ERC1363FixedPrice.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | pragma solidity 0.8.18;
  3 |     | 
  4 |     | import {ERC1363} from "erc-payable-token/contracts/token/ERC1363/ERC1363.sol";
  5 |     | import {ERC20Capped, ERC20} from "@openzeppelin/contracts/token/ERC20/extensions/ERC20Capped.sol";
  6 |     | import {Ownable} from "@openzeppelin/contracts/access/Ownable.sol";
  7 |     | 
  8 |     | /**
  9 |     |  * @title RareSkills Week1 ERC-1363 Fixed Price Mint Contract
 10 |     |  * @author Ben Yu
 11 |     |  * @notice An ERC-1363 contract that implements sanctioning addresses, admin transfers, and fixed price minting
 12 |     |  */
 13 |     | contract ERC1363FixedPrice is ERC1363, ERC20Capped, Ownable {
 14 |     |     uint256 public constant MAX_SUPPLY = 100_000_000 ether; // 100 million tokens; ether is shorthand for 18 decimal places
 15 |     |     uint256 public constant TOKENS_PER_ETH = 10000; // This translates to the wei level for more granularity
 16 |     | 
 17 |     |     mapping(address => bool) public bannedAddresses;
 18 |     | 
 19 |     |     constructor(
 20 |     |         string memory _name,
 21 |     |         string memory _symbol
 22 |     |     ) ERC20(_name, _symbol) ERC20Capped(MAX_SUPPLY) {}
 23 |     | 
 24 |     |     function _mint(
 25 |     |         address account,
 26 |     |         uint256 amount
 27 |     |     ) internal override(ERC20, ERC20Capped) {
 28 |     |         ERC20Capped._mint(account, amount);
 29 |     |     }
 30 |     | 
 31 |     |     /**
 32 |     |      * @notice Admin function to ban or unban an address
 33 |     |      * @param _bannedAddress Address to ban or unban
 34 |     |      * @param _banned True if address should be banned, false if address should be unbanned
 35 |     |      */
 36 |     |     function adminBanOrUnbanAddress(
 37 |     |         address _bannedAddress,
 38 |     |         bool _banned
 39 |     |     ) external onlyOwner {
 40 |     |         bannedAddresses[_bannedAddress] = _banned;
 41 |     |     }
 42 |     | 
 43 |     |     /**
 44 |     |      * @dev Overrides the default _beforeTokenTransfer function to add ban checks
 45 |     |      * @param from Address sending tokens
 46 |     |      * @param to Address receiving tokens
 47 |     |      * @param amount Amount of tokens being transferred
 48 |     |      */
 49 |     |     function _beforeTokenTransfer(
 50 |     |         address from,
 51 |     |         address to,
 52 |     |         uint256 amount
 53 |     |     ) internal override {
 54 |     |         require(!bannedAddresses[from], "ERC20: transfer from banned address");
 55 |     |         require(!bannedAddresses[to], "ERC20: transfer to banned address");
 56 |     |         super._beforeTokenTransfer(from, to, amount);
 57 |     |     }
 58 |     | 
 59 |     |     /**
 60 |     |      * @notice Admin function to transfer tokens from one address to another
 61 |     |      * @param _from Address to transfer tokens from
 62 |     |      * @param _to Address to transfer tokens to
 63 |     |      * @param _amount Amount of tokens to transfer
 64 |     |      */
 65 |     |     function adminTransfer(
 66 |     |         address _from,
 67 |     |         address _to,
 68 |     |         uint256 _amount
 69 |     |     ) external onlyOwner {
 70 |     |         _transfer(_from, _to, _amount);
 71 |     |     }
 72 |     | 
 73 |     |     /**
 74 |     |      * @notice Function to mint tokens at a fixed price of 10,000 tokens per ETH
 75 |     |      * @dev The amount is specified in 18 decimal places of the token as an integer (e.g. the same as wei)
 76 |     |      * @param _amount Amount of tokens to mint
 77 |     |      */
 78 |     |     function mintFixedPrice(uint256 _amount) external payable {
 79 |     |         require(_amount % 10_000 == 0, "Amount must be a multiple of 10,000");
 80 |     |         require(
 81 |     |             msg.value == (_amount / TOKENS_PER_ETH),
 82 |     |             "Incorrect ETH amount"
 83 |     |         );
 84 |     |         _mint(msg.sender, _amount);
 85 |     |     }
 86 |     | 
 87 |     |     /**
 88 |     |      * @notice Admin function to withdraw ETH from the contract
 89 |     |      */
 90 |     |     function adminWithdraw() external onlyOwner {
 91 |     |         payable(msg.sender).transfer(address(this).balance);
 92 |     |     }
 93 |     | }
 94 |     | 

/Users/intenex/Dropbox/code/rareskills/week1/contracts/ERC20BondingCurve.sol
   1 |     | // SPDX-License-Identifier: MIT
   2 |     | pragma solidity 0.8.18;
   3 |     | 
   4 |     | import {ERC20Capped, ERC20} from "@openzeppelin/contracts/token/ERC20/extensions/ERC20Capped.sol";
   5 |     | import {Ownable} from "@openzeppelin/contracts/access/Ownable.sol";
   6 |     | 
   7 |     | /**
   8 |     |  * @title RareSkills Week1 ERC-20 Bonding Curve Mint Contract
   9 |     |  * @author Ben Yu
  10 |     |  * @notice An ERC-20 contract that implements sanctioning addresses, admin transfers, and linear bonding curve minting
  11 |     |  */
  12 |     | contract ERC20BondingCurve is ERC20Capped, Ownable {
  13 |     |     uint256 public constant MAX_SUPPLY = 100_000_000 ether; // 100 million tokens; ether is shorthand for 18 decimal places
  14 |     |     uint256 public constant INITIAL_PRICE = 0.001 ether;
  15 |     |     uint256 public constant PRICE_INCREASE_PER_TOKEN = 0.0001 ether;
  16 |     | 
  17 |     |     mapping(address => uint256) public totalPaidPerAddress;
  18 |     |     mapping(address => bool) public bannedAddresses;
  19 |     | 
  20 |     |     uint256 public withdrawableBalance;
  21 |     | 
  22 |     |     constructor(
  23 |     |         string memory _name,
  24 |     |         string memory _symbol
  25 |     |     ) ERC20(_name, _symbol) ERC20Capped(MAX_SUPPLY) {}
  26 |     | 
  27 |     |     /**
  28 |     |      * @notice Admin function to ban or unban an address
  29 |     |      * @param _bannedAddress Address to ban or unban
  30 |     |      * @param _banned True if address should be banned, false if address should be unbanned
  31 |     |      */
  32 |     |     function adminBanOrUnbanAddress(
  33 |     |         address _bannedAddress,
  34 |     |         bool _banned
  35 |     |     ) external onlyOwner {
  36 |     |         bannedAddresses[_bannedAddress] = _banned;
  37 |     |     }
  38 |     | 
  39 |     |     /**
  40 |     |      * @dev Overrides the default _beforeTokenTransfer function to add ban checks
  41 |     |      * @param from Address sending tokens
  42 |     |      * @param to Address receiving tokens
  43 |     |      * @param amount Amount of tokens being transferred
  44 |     |      */
  45 |     |     function _beforeTokenTransfer(
  46 |     |         address from,
  47 |     |         address to,
  48 |     |         uint256 amount
  49 |     |     ) internal override {
  50 |     |         require(!bannedAddresses[from], "Transfer from banned address");
  51 |     |         require(!bannedAddresses[to], "Transfer to banned address");
  52 |     |         super._beforeTokenTransfer(from, to, amount);
  53 |     |     }
  54 |     | 
  55 |     |     /**
  56 |     |      * @notice Admin function to transfer tokens from one address to another
  57 |     |      * @param _from Address to transfer tokens from
  58 |     |      * @param _to Address to transfer tokens to
  59 |     |      * @param _amount Amount of tokens to transfer
  60 |     |      */
  61 |     |     function adminTransfer(
  62 |     |         address _from,
  63 |     |         address _to,
  64 |     |         uint256 _amount
  65 |     |     ) external onlyOwner {
  66 |     |         _transfer(_from, _to, _amount);
  67 |     |     }
  68 |     | 
  69 |     |     /**
  70 |     |      * @notice Function to mint tokens at a bonding curve price
  71 |     |      * @param _amount Amount of tokens to mint
  72 |     |      */
  73 |     |     function mintBondingCurve(uint256 _amount) external payable {
  74 |     |         require(
  75 |     |             totalSupply() + _amount <= MAX_SUPPLY,
  76 |     |             "Cannot mint more than max supply"
  77 |     |         );
  78 |     |         // First calculate the current price if buying 1 token
  79 |     |         uint256 currentPrice = INITIAL_PRICE +
  80 |     |             PRICE_INCREASE_PER_TOKEN *
  81 |     |             totalSupply();
  82 |     |         // Add the extra price for buying more than 1 token
  83 |     |         uint256 extraPriceForMultipleTokens = PRICE_INCREASE_PER_TOKEN *
  84 |     |             (_amount / 10 ** decimals()) -
  85 |     |             PRICE_INCREASE_PER_TOKEN;
  86 |     |         require(
  87 |     |             msg.value == _amount * currentPrice + extraPriceForMultipleTokens,
  88 |     |             "Incorrect ETH amount paid"
  89 |     |         );
  90 |     | 
  91 |     |         // Update the total paid per address
  92 |     |         totalPaidPerAddress[msg.sender] += msg.value;
  93 |     | 
  94 |     |         _mint(msg.sender, _amount);
  95 |     |     }
  96 |     | 
  97 |     |     /**
  98 |     |      * @notice Function to refund tokens at a 10% loss at current market rate
  99 |     |      * @param _amount Amount of tokens to refund
 100 |     |      */
 101 |     |     function buyBackMarketRate(uint256 _amount) external {
 102 |     |         require(
 103 |     |             balanceOf(msg.sender) >= _amount,
 104 |     |             "Cannot refund more tokens than owned"
 105 |     |         );
 106 |     |         // First calculate the current price
 107 |     |         uint256 currentPrice = INITIAL_PRICE +
 108 |     |             PRICE_INCREASE_PER_TOKEN *
 109 |     |             totalSupply();
 110 |     |         // Reduce the refund price for refunding multiple tokens; reduce always by 1 for first token
 111 |     |         // since currentPrice is the future price that has not yet been paid
 112 |     |         uint256 reducedPrice = PRICE_INCREASE_PER_TOKEN * _amount;
 113 |     |         uint256 refundAmount = _amount * currentPrice - reducedPrice;
 114 |     |         // Refund 10% less
 115 |     |         uint256 reducedRefundAmount = refundAmount / 10;
 116 |     |         refundAmount -= reducedRefundAmount;
 117 |     |         // Update the withdrawable balance
 118 |     |         withdrawableBalance += reducedRefundAmount;
 119 |     |         // Burn the tokens
 120 |     |         _burn(msg.sender, _amount);
 121 |     |         // Send the refund
 122 |     |         payable(msg.sender).transfer(refundAmount);
 123 |     |     }
 124 |     | 
 125 |     |     // Because of the inherent limitations as mentioned below, my assumption is this is not the intention of the
 126 |     |     // function as described in the prompt; however, included in just in case this was the intention, despite the limitations
 127 |     |     /**
 128 |     |      * @notice Function to refund tokens at a 10% loss to the average price paid by the user
 129 |     |      * Note - this function fails to take into transfers/secondary sales so it is only accurate for original minters
 130 |     |      * @param _amount Amount of tokens to refund
 131 |     |      */
 132 |     |     function buyBackAverageRate(uint256 _amount) external {
 133 |     |         require(
 134 |     |             balanceOf(msg.sender) >= _amount,
 135 |     |             "Cannot refund more tokens than owned"
 136 |     |         );
 137 |     |         // First calculate the average price paid by the user
 138 |     |         uint256 averagePrice = totalPaidPerAddress[msg.sender] /
 139 |     |             balanceOf(msg.sender);
 140 |     |         uint256 refundAmount = _amount * averagePrice;
 141 |     |         totalPaidPerAddress[msg.sender] -= refundAmount;
 142 |     |         // Refund 10% less
 143 |     |         uint256 reducedRefundAmount = refundAmount / 10;
 144 |     |         refundAmount -= reducedRefundAmount;
 145 |     |         // Update the withdrawable balance
 146 |     |         withdrawableBalance += reducedRefundAmount;
 147 |     |         // Burn the tokens
 148 |     |         _burn(msg.sender, _amount);
 149 |     |         // Send the refund
 150 |     |         payable(msg.sender).transfer(refundAmount);
 151 |     |     }
 152 |     | 
 153 |     |     /**
 154 |     |      * @notice Admin function to withdraw the 10% remainder of ETH from buybacks
 155 |     |      * @param _amount Amount of ETH to withdraw
 156 |     |      */
 157 |     |     function withdraw(uint256 _amount) external onlyOwner {
 158 |     |         require(
 159 |     |             _amount <= withdrawableBalance,
 160 |     |             "Cannot withdraw more than withdrawable balance"
 161 |     |         );
 162 |     |         withdrawableBalance -= _amount;
 163 |     |         payable(msg.sender).transfer(_amount);
 164 |     |     }
 165 |     | }
 166 |     | 

/Users/intenex/Dropbox/code/rareskills/week1/contracts/ERC20FixedPrice.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | pragma solidity 0.8.18;
  3 |     | 
  4 |     | import {ERC20Capped, ERC20} from "@openzeppelin/contracts/token/ERC20/extensions/ERC20Capped.sol";
  5 |     | import {Ownable} from "@openzeppelin/contracts/access/Ownable.sol";
  6 |     | 
  7 |     | /**
  8 |     |  * @title RareSkills Week1 ERC-20 Fixed Price Mint Contract
  9 |     |  * @author Ben Yu
 10 |     |  * @notice An ERC-20 contract that implements sanctioning addresses, admin transfers, and fixed price minting
 11 |     |  */
 12 |     | contract ERC20FixedPrice is ERC20Capped, Ownable {
 13 |     |     uint256 public constant MAX_SUPPLY = 100_000_000 * 10 ** 18;
 14 |     | 
 15 |     |     mapping(address => bool) public bannedAddresses;
 16 |     | 
 17 |     |     constructor(
 18 |     |         string memory _name,
 19 |     |         string memory _symbol
 20 |     |     ) ERC20(_name, _symbol) ERC20Capped(MAX_SUPPLY) {}
 21 |     | 
 22 |     |     /**
 23 |     |      * @notice Admin function to ban or unban an address
 24 |     |      * @param _bannedAddress Address to ban or unban
 25 |     |      * @param _banned True if address should be banned, false if address should be unbanned
 26 |     |      */
 27 |     |     function adminBanOrUnbanAddress(
 28 |     |         address _bannedAddress,
 29 |     |         bool _banned
 30 |     |     ) external onlyOwner {
 31 |     |         bannedAddresses[_bannedAddress] = _banned;
 32 |     |     }
 33 |     | 
 34 |     |     /**
 35 |     |      * @dev Overrides the default _beforeTokenTransfer function to add ban checks
 36 |     |      * @param from Address sending tokens
 37 |     |      * @param to Address receiving tokens
 38 |     |      * @param amount Amount of tokens being transferred
 39 |     |      */
 40 |     |     function _beforeTokenTransfer(
 41 |     |         address from,
 42 |     |         address to,
 43 |     |         uint256 amount
 44 |     |     ) internal override {
 45 |     |         require(!bannedAddresses[from], "ERC20: transfer from banned address");
 46 |     |         require(!bannedAddresses[to], "ERC20: transfer to banned address");
 47 |     |         super._beforeTokenTransfer(from, to, amount);
 48 |     |     }
 49 |     | 
 50 |     |     /**
 51 |     |      * @notice Admin function to transfer tokens from one address to another
 52 |     |      * @param _from Address to transfer tokens from
 53 |     |      * @param _to Address to transfer tokens to
 54 |     |      * @param _amount Amount of tokens to transfer
 55 |     |      */
 56 |     |     function adminTransfer(
 57 |     |         address _from,
 58 |     |         address _to,
 59 |     |         uint256 _amount
 60 |     |     ) external onlyOwner {
 61 |     |         _transfer(_from, _to, _amount);
 62 |     |     }
 63 |     | 
 64 |     |     /**
 65 |     |      * @notice Function to mint tokens at a fixed price of 10,000 tokens per ETH
 66 |     |      * @param _amount Amount of tokens to mint
 67 |     |      */
 68 |     |     function mintFixedPrice(uint256 _amount) external payable {
 69 |     |         require(
 70 |     |             _amount % 10_000 == 0,
 71 |     |             "ERC20: amount must be a multiple of 10,000"
 72 |     |         );
 73 |     |         require(
 74 |     |             msg.value == (_amount / 10 ** uint256(decimals())) / 10_000,
 75 |     |             "ERC20: incorrect ETH amount"
 76 |     |         );
 77 |     |         _mint(msg.sender, _amount);
 78 |     |     }
 79 |     | 
 80 |     |     /**
 81 |     |      * @notice Admin function to withdraw ETH from the contract
 82 |     |      */
 83 |     |     function adminWithdraw() external onlyOwner {
 84 |     |         payable(msg.sender).transfer(address(this).balance);
 85 |     |     }
 86 |     | }
 87 |     | 

/Users/intenex/Dropbox/code/rareskills/week1/contracts/EchidnaTest.sol
  1 |     | pragma solidity ^0.8.17;
  2 |     | 
  3 |     | import {ERC1363BondingCurve} from "./ERC1363BondingCurve.sol";
  4 |     | 
  5 | *r  | // We are using an external testing methodology
  6 |     | contract EchidnaTest is ERC1363BondingCurve {
  7 |     |     event Debug(string, uint256);
  8 |     | 
  9 |     |     // setup
 10 |     |     constructor() ERC1363BondingCurve("Echidna Test", "ECHID") {}
 11 |     | 
 12 |     |     // test minting the tokens and selling them to each other and make sure it all works
 13 |     | 
 14 | r   |     function mintBondingCurveAndRefund() public payable {
 15 | r   |         uint256 startingContractBalance = contractBalance();
 16 | r   |         emit Debug("before everything", startingContractBalance);
 17 | r   |         uint256 currentPrice = getCurrentPrice();
 18 | r   |         uint256 amountToMint = ((msg.value / currentPrice) * oneToken()) / 10; // just to be safe set the amount to 10 times less than the maximum you could buy
 19 |     |         mintBondingCurve(amountToMint);
 20 |     |         emit Debug("after minting", contractBalance());
 21 |     |         assert(balanceOf(msg.sender) == amountToMint);
 22 |     |         assert(totalSupply() == amountToMint);
 23 |     |         assert(contractBalance() >= startingContractBalance);
 24 |     |         transferAndCall(address(this), amountToMint);
 25 |     |         emit Debug("after refund", contractBalance());
 26 |     |         assert(balanceOf(msg.sender) == 0);
 27 |     |         assert(totalSupply() == 0);
 28 |     |         assert(contractBalance() == startingContractBalance);
 29 |     |     }
 30 |     | }
 31 |     | 

/Users/intenex/Dropbox/code/rareskills/week1/node_modules/erc-payable-token/contracts/token/ERC1363/ERC1363.sol
   1 |     | // SPDX-License-Identifier: MIT
   2 |     | 
   3 |     | pragma solidity ^0.8.0;
   4 |     | 
   5 |     | import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
   6 |     | import "@openzeppelin/contracts/utils/Address.sol";
   7 |     | import "@openzeppelin/contracts/utils/introspection/ERC165.sol";
   8 |     | 
   9 |     | import "./IERC1363.sol";
  10 |     | import "./IERC1363Receiver.sol";
  11 |     | import "./IERC1363Spender.sol";
  12 |     | 
  13 |     | /**
  14 |     |  * @title ERC1363
  15 |     |  * @dev Implementation of an ERC1363 interface.
  16 |     |  */
  17 |     | abstract contract ERC1363 is ERC20, IERC1363, ERC165 {
  18 |     |     using Address for address;
  19 |     | 
  20 |     |     /**
  21 |     |      * @dev See {IERC165-supportsInterface}.
  22 |     |      */
  23 | *   |     function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {
  24 | *   |         return interfaceId == type(IERC1363).interfaceId || super.supportsInterface(interfaceId);
  25 |     |     }
  26 |     | 
  27 |     |     /**
  28 |     |      * @dev Transfer tokens to a specified address and then execute a callback on `to`.
  29 |     |      * @param to The address to transfer to.
  30 |     |      * @param amount The amount to be transferred.
  31 |     |      * @return A boolean that indicates if the operation was successful.
  32 |     |      */
  33 | r   |     function transferAndCall(address to, uint256 amount) public virtual override returns (bool) {
  34 | r   |         return transferAndCall(to, amount, "");
  35 |     |     }
  36 |     | 
  37 |     |     /**
  38 |     |      * @dev Transfer tokens to a specified address and then execute a callback on `to`.
  39 |     |      * @param to The address to transfer to
  40 |     |      * @param amount The amount to be transferred
  41 |     |      * @param data Additional data with no specified format
  42 |     |      * @return A boolean that indicates if the operation was successful.
  43 |     |      */
  44 | *r  |     function transferAndCall(address to, uint256 amount, bytes memory data) public virtual override returns (bool) {
  45 | *r  |         transfer(to, amount);
  46 | *r  |         require(_checkOnTransferReceived(_msgSender(), to, amount, data), "ERC1363: receiver returned wrong data");
  47 | *   |         return true;
  48 |     |     }
  49 |     | 
  50 |     |     /**
  51 |     |      * @dev Transfer tokens from one address to another and then execute a callback on `to`.
  52 |     |      * @param from The address which you want to send tokens from
  53 |     |      * @param to The address which you want to transfer to
  54 |     |      * @param amount The amount of tokens to be transferred
  55 |     |      * @return A boolean that indicates if the operation was successful.
  56 |     |      */
  57 | r   |     function transferFromAndCall(address from, address to, uint256 amount) public virtual override returns (bool) {
  58 | r   |         return transferFromAndCall(from, to, amount, "");
  59 |     |     }
  60 |     | 
  61 |     |     /**
  62 |     |      * @dev Transfer tokens from one address to another and then execute a callback on `to`.
  63 |     |      * @param from The address which you want to send tokens from
  64 |     |      * @param to The address which you want to transfer to
  65 |     |      * @param amount The amount of tokens to be transferred
  66 |     |      * @param data Additional data with no specified format
  67 |     |      * @return A boolean that indicates if the operation was successful.
  68 |     |      */
  69 | r   |     function transferFromAndCall(
  70 |     |         address from,
  71 |     |         address to,
  72 |     |         uint256 amount,
  73 |     |         bytes memory data
  74 | r   |     ) public virtual override returns (bool) {
  75 | r   |         transferFrom(from, to, amount);
  76 | r   |         require(_checkOnTransferReceived(from, to, amount, data), "ERC1363: receiver returned wrong data");
  77 |     |         return true;
  78 |     |     }
  79 |     | 
  80 |     |     /**
  81 |     |      * @dev Approve spender to transfer tokens and then execute a callback on `spender`.
  82 |     |      * @param spender The address allowed to transfer to
  83 |     |      * @param amount The amount allowed to be transferred
  84 |     |      * @return A boolean that indicates if the operation was successful.
  85 |     |      */
  86 | r   |     function approveAndCall(address spender, uint256 amount) public virtual override returns (bool) {
  87 | r   |         return approveAndCall(spender, amount, "");
  88 |     |     }
  89 |     | 
  90 |     |     /**
  91 |     |      * @dev Approve spender to transfer tokens and then execute a callback on `spender`.
  92 |     |      * @param spender The address allowed to transfer to.
  93 |     |      * @param amount The amount allowed to be transferred.
  94 |     |      * @param data Additional data with no specified format.
  95 |     |      * @return A boolean that indicates if the operation was successful.
  96 |     |      */
  97 | r   |     function approveAndCall(address spender, uint256 amount, bytes memory data) public virtual override returns (bool) {
  98 | r   |         approve(spender, amount);
  99 | r   |         require(_checkOnApprovalReceived(spender, amount, data), "ERC1363: spender returned wrong data");
 100 |     |         return true;
 101 |     |     }
 102 |     | 
 103 |     |     /**
 104 |     |      * @dev Internal function to invoke {IERC1363Receiver-onTransferReceived} on a target address.
 105 |     |      *  The call is not executed if the target address is not a contract.
 106 |     |      * @param sender address Representing the previous owner of the given token amount
 107 |     |      * @param recipient address Target address that will receive the tokens
 108 |     |      * @param amount uint256 The amount mount of tokens to be transferred
 109 |     |      * @param data bytes Optional data to send along with the call
 110 |     |      * @return whether the call correctly returned the expected magic value
 111 |     |      */
 112 | *r  |     function _checkOnTransferReceived(
 113 |     |         address sender,
 114 |     |         address recipient,
 115 |     |         uint256 amount,
 116 |     |         bytes memory data
 117 | *r  |     ) internal virtual returns (bool) {
 118 | *r  |         if (!recipient.isContract()) {
 119 | r   |             revert("ERC1363: transfer to non contract address");
 120 |     |         }
 121 |     | 
 122 | *   |         try IERC1363Receiver(recipient).onTransferReceived(_msgSender(), sender, amount, data) returns (bytes4 retval) {
 123 | *   |             return retval == IERC1363Receiver.onTransferReceived.selector;
 124 |     |         } catch (bytes memory reason) {
 125 |     |             if (reason.length == 0) {
 126 |     |                 revert("ERC1363: transfer to non ERC1363Receiver implementer");
 127 |     |             } else {
 128 |     |                 /// @solidity memory-safe-assembly
 129 |     |                 assembly {
 130 |     |                     revert(add(32, reason), mload(reason))
 131 |     |                 }
 132 |     |             }
 133 |     |         }
 134 |     |     }
 135 |     | 
 136 |     |     /**
 137 |     |      * @dev Internal function to invoke {IERC1363Receiver-onApprovalReceived} on a target address.
 138 |     |      *  The call is not executed if the target address is not a contract.
 139 |     |      * @param spender address The address which will spend the funds
 140 |     |      * @param amount uint256 The amount of tokens to be spent
 141 |     |      * @param data bytes Optional data to send along with the call
 142 |     |      * @return whether the call correctly returned the expected magic value
 143 |     |      */
 144 | r   |     function _checkOnApprovalReceived(
 145 |     |         address spender,
 146 |     |         uint256 amount,
 147 |     |         bytes memory data
 148 | r   |     ) internal virtual returns (bool) {
 149 | r   |         if (!spender.isContract()) {
 150 | r   |             revert("ERC1363: approve a non contract address");
 151 |     |         }
 152 |     | 
 153 | r   |         try IERC1363Spender(spender).onApprovalReceived(_msgSender(), amount, data) returns (bytes4 retval) {
 154 |     |             return retval == IERC1363Spender.onApprovalReceived.selector;
 155 |     |         } catch (bytes memory reason) {
 156 | r   |             if (reason.length == 0) {
 157 | r   |                 revert("ERC1363: approve a non ERC1363Spender implementer");
 158 |     |             } else {
 159 |     |                 /// @solidity memory-safe-assembly
 160 |     |                 assembly {
 161 |     |                     revert(add(32, reason), mload(reason))
 162 |     |                 }
 163 |     |             }
 164 |     |         }
 165 |     |     }
 166 |     | }
 167 |     | 

/Users/intenex/Dropbox/code/rareskills/week1/node_modules/erc-payable-token/contracts/token/ERC1363/IERC1363.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | 
  3 |     | pragma solidity ^0.8.0;
  4 |     | 
  5 |     | import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
  6 |     | import "@openzeppelin/contracts/utils/introspection/IERC165.sol";
  7 |     | 
  8 |     | /**
  9 |     |  * @title IERC1363 Interface
 10 |     |  * @dev Interface of an ERC1363 compliant contract, as defined in the https://eips.ethereum.org/EIPS/eip-1363[EIP].
 11 |     |  */
 12 |     | interface IERC1363 is IERC20, IERC165 {
 13 |     |     /*
 14 |     |      * Note: the ERC-165 identifier for this interface is 0xb0202a11.
 15 |     |      * 0xb0202a11 ===
 16 |     |      *   bytes4(keccak256('transferAndCall(address,uint256)')) ^
 17 |     |      *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^
 18 |     |      *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^
 19 |     |      *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^
 20 |     |      *   bytes4(keccak256('approveAndCall(address,uint256)')) ^
 21 |     |      *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))
 22 |     |      */
 23 |     | 
 24 |     |     /**
 25 |     |      * @notice Transfer tokens from `msg.sender` to another address and then call `onTransferReceived` on receiver.
 26 |     |      * @param to address The address which you want to transfer to
 27 |     |      * @param amount uint256 The amount of tokens to be transferred
 28 |     |      * @return true unless throwing
 29 |     |      */
 30 |     |     function transferAndCall(address to, uint256 amount) external returns (bool);
 31 |     | 
 32 |     |     /**
 33 |     |      * @notice Transfer tokens from `msg.sender` to another address and then call `onTransferReceived` on receiver.
 34 |     |      * @param to address The address which you want to transfer to
 35 |     |      * @param amount uint256 The amount of tokens to be transferred
 36 |     |      * @param data bytes Additional data with no specified format, sent in call to `to`
 37 |     |      * @return true unless throwing
 38 |     |      */
 39 |     |     function transferAndCall(address to, uint256 amount, bytes calldata data) external returns (bool);
 40 |     | 
 41 |     |     /**
 42 |     |      * @notice Transfer tokens from one address to another and then call `onTransferReceived` on receiver.
 43 |     |      * @param from address The address which you want to send tokens from
 44 |     |      * @param to address The address which you want to transfer to
 45 |     |      * @param amount uint256 The amount of tokens to be transferred
 46 |     |      * @return true unless throwing
 47 |     |      */
 48 |     |     function transferFromAndCall(address from, address to, uint256 amount) external returns (bool);
 49 |     | 
 50 |     |     /**
 51 |     |      * @notice Transfer tokens from one address to another and then call `onTransferReceived` on receiver.
 52 |     |      * @param from address The address which you want to send tokens from
 53 |     |      * @param to address The address which you want to transfer to
 54 |     |      * @param amount uint256 The amount of tokens to be transferred
 55 |     |      * @param data bytes Additional data with no specified format, sent in call to `to`
 56 |     |      * @return true unless throwing
 57 |     |      */
 58 |     |     function transferFromAndCall(address from, address to, uint256 amount, bytes calldata data) external returns (bool);
 59 |     | 
 60 |     |     /**
 61 |     |      * @notice Approve the passed address to spend the specified amount of tokens on behalf of msg.sender
 62 |     |      * and then call `onApprovalReceived` on spender.
 63 |     |      * Beware that changing an allowance with this method brings the risk that someone may use both the old
 64 |     |      * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this
 65 |     |      * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:
 66 |     |      * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
 67 |     |      * @param spender address The address which will spend the funds
 68 |     |      * @param amount uint256 The amount of tokens to be spent
 69 |     |      */
 70 |     |     function approveAndCall(address spender, uint256 amount) external returns (bool);
 71 |     | 
 72 |     |     /**
 73 |     |      * @notice Approve the passed address to spend the specified amount of tokens on behalf of msg.sender
 74 |     |      * and then call `onApprovalReceived` on spender.
 75 |     |      * Beware that changing an allowance with this method brings the risk that someone may use both the old
 76 |     |      * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this
 77 |     |      * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:
 78 |     |      * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
 79 |     |      * @param spender address The address which will spend the funds
 80 |     |      * @param amount uint256 The amount of tokens to be spent
 81 |     |      * @param data bytes Additional data with no specified format, sent in call to `spender`
 82 |     |      */
 83 |     |     function approveAndCall(address spender, uint256 amount, bytes calldata data) external returns (bool);
 84 |     | }
 85 |     | 

/Users/intenex/Dropbox/code/rareskills/week1/node_modules/erc-payable-token/contracts/token/ERC1363/IERC1363Receiver.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | 
  3 |     | pragma solidity ^0.8.0;
  4 |     | 
  5 |     | /**
  6 |     |  * @title IERC1363Receiver interface
  7 |     |  * @dev Interface for any contract that wants to support `transferAndCall` or `transferFromAndCall`
  8 |     |  *  from ERC1363 token contracts.
  9 |     |  */
 10 |     | interface IERC1363Receiver {
 11 |     |     /*
 12 |     |      * Note: the ERC-165 identifier for this interface is 0x88a7ca5c.
 13 |     |      * 0x88a7ca5c === bytes4(keccak256("onTransferReceived(address,address,uint256,bytes)"))
 14 |     |      */
 15 |     | 
 16 |     |     /**
 17 |     |      * @notice Handle the receipt of ERC1363 tokens.
 18 |     |      * @dev Any ERC1363 smart contract calls this function on the recipient
 19 |     |      * after a `transfer` or a `transferFrom`. This function MAY throw to revert and reject the
 20 |     |      * transfer. Return of other than the magic value MUST result in the
 21 |     |      * transaction being reverted.
 22 |     |      * Note: the token contract address is always the message sender.
 23 |     |      * @param spender address The address which called `transferAndCall` or `transferFromAndCall` function
 24 |     |      * @param sender address The address which are token transferred from
 25 |     |      * @param amount uint256 The amount of tokens transferred
 26 |     |      * @param data bytes Additional data with no specified format
 27 |     |      * @return `bytes4(keccak256("onTransferReceived(address,address,uint256,bytes)"))` unless throwing
 28 |     |      */
 29 |     |     function onTransferReceived(
 30 |     |         address spender,
 31 |     |         address sender,
 32 |     |         uint256 amount,
 33 |     |         bytes calldata data
 34 |     |     ) external returns (bytes4);
 35 |     | }
 36 |     | 

/Users/intenex/Dropbox/code/rareskills/week1/node_modules/erc-payable-token/contracts/token/ERC1363/IERC1363Spender.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | 
  3 |     | pragma solidity ^0.8.0;
  4 |     | 
  5 |     | /**
  6 |     |  * @title ERC1363Spender interface
  7 |     |  * @dev Interface for any contract that wants to support `approveAndCall`
  8 |     |  *  from ERC1363 token contracts.
  9 |     |  */
 10 |     | interface IERC1363Spender {
 11 |     |     /*
 12 |     |      * Note: the ERC-165 identifier for this interface is 0x7b04a2d0.
 13 |     |      * 0x7b04a2d0 === bytes4(keccak256("onApprovalReceived(address,uint256,bytes)"))
 14 |     |      */
 15 |     | 
 16 |     |     /**
 17 |     |      * @notice Handle the approval of ERC1363 tokens.
 18 |     |      * @dev Any ERC1363 smart contract calls this function on the recipient
 19 |     |      * after an `approve`. This function MAY throw to revert and reject the
 20 |     |      * approval. Return of other than the magic value MUST result in the
 21 |     |      * transaction being reverted.
 22 |     |      * Note: the token contract address is always the message sender.
 23 |     |      * @param sender address The address which called `approveAndCall` function
 24 |     |      * @param amount uint256 The amount of tokens to be spent
 25 |     |      * @param data bytes Additional data with no specified format
 26 |     |      * @return `bytes4(keccak256("onApprovalReceived(address,uint256,bytes)"))` unless throwing
 27 |     |      */
 28 |     |     function onApprovalReceived(address sender, uint256 amount, bytes calldata data) external returns (bytes4);
 29 |     | }
 30 |     | 

