Echidna's exploit involves first having the exploiter/deploy address approve a second address to spend its tokens.

Next, that second address calls transferFrom, passing it the from address as the exploiter/deployer and any random arbitrary second address to send the tokens to, and transfers a small amount under 1000 tokens.

This exposes the critical error in the internal _transfer function, which decrements the balanceOf[msg.sender], which is the second address/operator, and not the address that actually owns the tokens that should be decremented from.

This causes an overflow for the second address, giving it a balance close to the max uint256 limit (minus whatever amount of <1000 tokens was transferred), which allows that address to now send the original exploiter address over 1,000,000 tokens and complete the exploit.

transfer number:
43364199424431244104578344606195638068600297634649103214716387904629789151347

approve number:
78091807132703813928475214038154485622956668739021513685010422967683315123943

Max uint256 number:
115792089237316195423570985008687907853269984665640564039457584007913129639935