The exploit takes advantage of the fact that getSwapPrice depends on the ratio of the Dex's current balance of each token.

By first swapping a very large amount of one token for the other, we introduce arbitrage in the price.

If we swap 10 ETH of tokens such that the contract now has 90 ETH of one token and 110 ETH of the other, and we now have 0 ETH of one token and 20 ETH of the other, the getSwapPrice() function now returns amountToSwap * 110/90 when swapping from the second token back to the first, so now we can swap 20 ETH of the second token for 24.444 ETH of the first token.

Now, we can keep repeating this back and forth until we fully drain one of the contracts, just transferring the maximum value to swap each time back and forth between the two functions.


---

8828492944073409758, 8.828 ETH, 1 -> 2
9463511677402909176, 9.46 ETH 2 -> 1
4965777042141595333, 4.96 ETH 2 -> 1
7584007913129639927, 7.584 ETH 1 -> 2
8999845387443776458, 8.9998 ETH 2 -> 1
7584007913129639937, 7.584 ETH 1 -> 2
7584007913129639934, 7.584 ETH 1 -> 2
8986113810481899943, 8.986 ETH 2 -> 1
4664798450171101619, 4.665 ETH 1 -> 2
7068068802352178096, 7.068 ETH 2 -> 1
7584007913129639935, 7.584 ETH 1 -> 2
6013060559667551066, 6.013 ETH 2 -> 1
9954111813182175355, 9.954 ETH 1 -> 2
7066319942316339458, 7.0663 ETH 2 -> 1
9645892114095423457, 9.646 ETH 2 -> 1
9874641839026563377, 9.87464 ETH 1 -> 2
7214524809651725780, 7.2145 ETH 2 -> 1
9725236254468717080, 9.725 ETH 2 -> 1